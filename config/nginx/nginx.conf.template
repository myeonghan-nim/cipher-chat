user  nginx;
# CPU 코어 수에 따라 워커 프로세스 수를 자동으로 설정
worker_processes  auto;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    # 각 워커 프로세스가 처리할 수 있는 최대 연결 수
    worker_connections  1024;
}

http {
    # 파일 확장자와 MIME 유형 매핑을 통해 올바른 content-type 설정
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 로그 포맷 설정
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    # 파일 전송과 연결 유지 시간 설정
    sendfile        on;
    keepalive_timeout  65;

    # 보안을 위해 추가로 설정 가능한 헤더

    # Strict-Transport-Security (HSTS): 브라우저가 HTTPS로만 접근 가능하도록 지시하여 중간자 공격을 예방
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # X-Frame-Options: 다른 사이트의 iframe에 포함되는 것을 제어하여 클릭재킹 공격을 방지
    # add_header X-Frame-Options "SAMEORIGIN" always;

    # X-Content-Type-Options: 브라우저가 MIME 스니핑을 하지 못하게 하여 콘텐츠 유형에 따른 보안을 강화
    # add_header X-Content-Type-Options "nosniff" always;

    # Content-Security-Policy (CSP): 페이지 내에서 로드할 수 있는 리소스를 제한하여 XSS 및 데이터 인젝션 공격을 예방
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; object-src 'none'; style-src 'self' 'unsafe-inline';" always;

    # Referrer-Policy: 외부로 전송하는 referrer 정보의 양을 제한
    # add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Permissions-Policy (구 Feature-Policy): 웹 브라우저 기능(예: 카메라, 마이크, 지리정보 등)에 대한 접근을 제어
    # add_header Permissions-Policy "geolocation=(self), microphone=(), camera=()" always;

    # X-XSS-Protection: 구형 브라우저에서 내장된 XSS 필터를 활성화하여 XSS 공격을 방지, 최신 브라우저는 CSP로 대체
    # add_header X-XSS-Protection "1; mode=block" always;

    # Expect-CT: 브라우저에게 인증서 투명성(CT) 검증 정책을 적용하도록 지시
    # add_header Expect-CT "max-age=86400, enforce" always;

    # 업스트림 설정: FastAPI 서비스에 대한 설정
    upstream fastapi_servers {
        # Docker Compose 내 서비스 이름 "fastapi"와 환경 변수 FASTAPI_PORT 사용
        server fastapi1:${FASTAPI_PORT};
        server fastapi2:${FASTAPI_PORT};
    }

    server {
        # HTTPS로 443 포트를 리슨
        listen 443 ssl;
        server_name localhost;

        # SSL 설정
        ssl_certificate     /etc/ssl/certs/nginx.crt;
        ssl_certificate_key /etc/ssl/private/nginx.key;
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;

        location / {
            # 모든 요청을 업스트림(fastapi)으로 전달
            proxy_pass https://fastapi_servers;
            proxy_ssl_server_name on;
            # production 환경에서는 self-signed가 아닌 인증서를 사용해서 검증 과정을 거쳐야 함.
            proxy_ssl_verify off;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket 지원: HTTP/1.1 사용 및 업그레이드 헤더 설정
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}
